package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io/ioutil"
	"os"
	"strings"
)

var b *bytes.Buffer

func main() {
	gofile := os.Getenv("GOFILE")

	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, gofile, nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	b = &bytes.Buffer{}

	fmt.Fprintln(b, "// Code generated by go generate; DO NOT EDIT.")
	fmt.Fprintln(b, "// This file was generated by Vuego generator.")
	fmt.Fprintf(b, "package %s\n\n", f.Name)
	fmt.Fprintln(b, "import \"github.com/gogmod/vuego\"\n")
	fmt.Fprintln(b, "var _ = vuego.New\n")

	for _, decl := range f.Decls {

		if gen, ok := decl.(*ast.GenDecl); !ok || gen.Tok != token.TYPE {
			continue
		}

		gen := decl.(*ast.GenDecl)
		for _, spec := range gen.Specs {
			if _, ok := spec.(*ast.TypeSpec); !ok {
				continue
			}

			typeSpec := spec.(*ast.TypeSpec)
			// fmt.Println(typeSpec.Name)

			structType := typeSpec.Type.(*ast.StructType)
			for i, field := range structType.Fields.List {
				// first field must be the embedded js.Value
				if i == 0 {
					if len(field.Names) != 0 {
						panic("a")
					}
					jsValue := field.Type.(*ast.SelectorExpr)
					name := fmt.Sprintf("%s.%s", jsValue.X, jsValue.Sel)
					if name != "js.Value" {
						panic("b")
					}
				} else {
					// generate getter and setter
					// fmt.Println(field.Names[0])
					// fmt.Println(reflect.TypeOf(field.Type))
					switch v := field.Type.(type) {
					case *ast.Ident:
						typeName := fmt.Sprintf("%s", v.Name)
						valFuncName := strings.Title(typeName)
						tag := getTag(field)

						genGetter(typeSpec, field, typeName, tag, valFuncName)
						genSetter(typeSpec, field, typeName, tag, valFuncName)
					case *ast.SelectorExpr:
						typeName := fmt.Sprintf("%s.%s", v.X, v.Sel)
						valFuncName := "" // strings.Title(typeName)
						tag := getTag(field)

						genGetter(typeSpec, field, typeName, tag, valFuncName)
						genSetter(typeSpec, field, typeName, tag, valFuncName)
					case *ast.ArrayType:
						// typeName := fmt.Sprintf("[]*%s", v.Elt.(*ast.StarExpr).X)
						elemTypeName := fmt.Sprintf("*%s", v.Elt.(*ast.StarExpr).X)
						valFuncName := ""
						tag := getTag(field)

						genAdder(typeSpec, field, elemTypeName, tag, valFuncName)
					}
				}
			}
		}
	}

	ioutil.WriteFile("vuego_"+gofile, b.Bytes(), 0644)
}

func getTag(f *ast.Field) string {
	parts := strings.Split(f.Tag.Value, ":")
	tag := f.Names[0].Name
	if len(parts) == 2 {
		tag = strings.Trim(parts[1], "\"`")
	}
	return tag
}

func genGetter(typeSpec *ast.TypeSpec, f *ast.Field, typeName string, tag string, valFuncName string) {
	if valFuncName != "" {
		valFuncName = "." + valFuncName + "()"
	}
	fmt.Fprintf(b, "func (this *%s) Get%s() %s {\n", typeSpec.Name, f.Names[0], typeName)
	fmt.Fprintf(b, "\tthis.%s = this.Value.Get(%q)%s\n", f.Names[0], tag, valFuncName)
	fmt.Fprintf(b, "\treturn this.%s\n", f.Names[0])
	fmt.Fprintf(b, "}\n\n")
}

func genSetter(typeSpec *ast.TypeSpec, f *ast.Field, typeName string, tag string, valFuncName string) {
	fmt.Fprintf(b, "func (this *%s) Set%s(val %s) {\n", typeSpec.Name, f.Names[0], typeName)
	fmt.Fprintf(b, "\tthis.%s = val\n", f.Names[0])
	fmt.Fprintf(b, "\tthis.Value.Set(%q, val)\n", tag)
	fmt.Fprintf(b, "}\n\n")
}

func genAdder(typeSpec *ast.TypeSpec, f *ast.Field, typeName string, tag string, valFuncName string) {
	fmt.Fprintf(b, "func (this *%s) AddTo%s(val %s) {\n", typeSpec.Name, f.Names[0], typeName)
	fmt.Fprintf(b, "\tthis.%s = append(this.%s, val)\n", f.Names[0], f.Names[0])
	fmt.Fprintf(b, "\tthis.Value.Get(%q).Call(\"push\", vuego.ToJSON(val))\n", tag)
	fmt.Fprintf(b, "}\n\n")
}
